import {ipcMain} from "electron";
import ElectronStore from "electron-store";
import {BotConfig, StoreSchema} from "./store/StoreSchema";

export class BotConfigService {
    private appStorage: ElectronStore<StoreSchema>;

    private bot: BotConfig = {
        roulette: {
            enabled: false,
            allowToBanEditors: false,
            commands: [
                "!roulette", "!—Ä—É–ª–µ—Ç–∫–∞"
            ],
            survivalMessages: [
                `@{user} still alive! üé≤`,
                '@${user} –ù–µ –ø—Ä–æ–±–∏–ª!',
                '@${user} Need one more pull; Just one more!',
            ],
            deathMessages: [
                '@${user} –ü–æ–±–µ–¥–∏–ª –∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–µ–º–Ω–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ. üîá',
                '@${user} *–ê —Ä–∞–∑–≤–µ –ú–∞–∫–∞—Ä–æ–≤—ã–º –∏–≥—Ä–∞—é—Ç –≤ —Ä—É–ª–µ—Ç–∫—É?* üîá'
            ],
            cooldownMessage: [
                '@${user}, –ü—Ä–∏–≤–µ—Ç... –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                '@${user}, –ü—Ä–∏–≤–µ—Ç... –ß–µ–º –º–æ–≥—É [PEKO]?',
                '@${user}, –æ—Ç —Ñ–∞–∫–∞–ø–∞ –¥–æ —Ñ–∞–∫–∞–ø–∞ 30 —Å–µ–∫—É–Ω–¥. ‚è≥',
                'WAAAAAAAAGH!!!!11!',
            ],
            protectedUsersMessages: [
                "@${user}, –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ"
            ],
            muteDuration: 120000,
            commandCooldown: 30000,
            chance: 0.18,
        },
        custom: { enabled: false },
        gacha: {
            enabled: false,
            banner: {
                id: 0,
                name: '–ù–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä',
                featured5StarId: null,
                featured4StarIds: [],
                hardPity5Star: 90,
                hardPity4Star: 10,
                softPityStart: 74,
                baseRate5Star: 0.006,
                baseRate4Star: 0.051,
                featuredRate4Star: 0.5,
                hasCapturingRadiance: true
            },
            items: [],
            triggers: [],
        },
        pingpong: {
            enabled: false,
            commands: [
                {
                    enabled: true,
                    name: "ping",
                    triggers: [
                        { type: "text", value: "!ping" },
                        { type: "text", value: "!–ø–∏–Ω–≥" }
                    ],
                    responses: ["pong"],
                    triggerType: "exact"
                },
                {
                    enabled: true,
                    name: "–ü—Ä–∏–≤–µ—Ç...",
                    triggers: [
                        {
                            type: "regex",
                            value: "^((–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–∑–¥–æ—Ä–æ–≤–æ|–∑–¥–∞—Ä–æ–≤–∞|–¥–∞—Ä–æ–≤|–¥–∞—Ä–æ–≤–∞)[\\p{P}\\s]*|^–∑–¥—Ä[\\p{P}\\s]*)",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^(–ø—Ä–∏–≤(–µ—Ç|–µ—Ç–∏–∫|–µ—Ç–∏–∫–æ—Å|–µ—Ç–∏—â|–µ—Ç–æ—Å)?)[\\p{P}\\s]*$",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^—Ö–∞–π(–∫–∞|—É—à–∫–∏|—á–∏–∫)?[\\p{P}\\s]*",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^–¥–æ–±—Ä—ã–π\\s+(–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Ç—Ä–æ)",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^–¥–æ–±—Ä–æ–≥–æ\\s+(–≤—Ä–µ–º–µ–Ω–∏|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|—É—Ç—Ä–∞)",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^hello\\b",
                            flags: "i"
                        },
                        {
                            type: "regex",
                            value: "^hi\\b",
                            flags: "i"
                        },
                        {
                            type: "regex",
                            value: "^hey\\b",
                            flags: "i"
                        }
                    ],
                    responses: ["–ü—Ä–∏–≤–µ—Ç... —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"],
                    triggerType: "start"
                },
                {
                    enabled: false,
                    name: "–ü–∏–≤–æ",
                    triggers: [
                        {
                            type: "regex",
                            value: "^–ø–∏–≤–æ[\\p{P}\\s]*$",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^–ø–∏–≤–∫–æ[\\p{P}\\s]*$",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^–ø–∏–≤–∫–∞[\\p{P}\\s]*$",
                            flags: "iu"
                        },
                        {
                            type: "regex",
                            value: "^–ø–∏–≤—á–∞–Ω—Å–∫–∏–π[\\p{P}\\s]*$",
                            flags: "iu"
                        }
                    ],
                    responses: ["üç∫", "üç∫üç∫", "üçª"],
                    triggerType: "contains"
                }
            ]
        }
    }

    constructor(
        store: ElectronStore<StoreSchema>,
        onConfigurationChanged: (newConfig: BotConfig) => void
    ) {
        this.appStorage = store;

        const name =  this.appStorage.get('currentBot') || 'default';
        let configs = this.appStorage.get('bots') || {};
        console.log('Loaded bot configurations:', configs);
        if (Object.keys(configs).length === 0) {
            configs['default'] = this.bot;
            this.appStorage.set('bots', configs);
        }
        const currentBot = configs[name] || configs['default'];
        if (currentBot) {
            onConfigurationChanged(currentBot);
        }

        ipcMain.handle('bot:get-all', async () => {
            return store.get('bots') || {};
        });
        ipcMain.handle('bot:get-by-name', async (_e, botName: string) => {
            const config = store.get('bots')
            return config[botName];
        });
        ipcMain.handle('bot:set', async (_e, botName: string, botConfig: BotConfig) => {
            const config = this.appStorage.get('bots') || {};
            config[botName] = botConfig;
            this.appStorage.set('bots', config);
            onConfigurationChanged(config[botName]);
            return true;
        });
        ipcMain.handle('bot:create', async (_e, botName: string) => {
            const configs = this.appStorage.get('bots') || {};
            if (configs[botName]) {
                throw new Error(`Bot with name ${botName} already exists`);
            }
            if (!configs['default']) {
                configs[botName] =  this.bot;
            } else {
                configs[botName] = configs['default'];
            }
            this.appStorage.set('bots', configs);
            return true;
        });
        ipcMain.handle('bot:delete', async (_e, botName: string) => {
            if (botName === 'default') {
                throw new Error("Cannot delete the default bot");
            }
            const config = this.appStorage.get('bots') || {};
            if (config[botName]) {
                delete config[botName];
                this.appStorage.set('bots', config);
                return true;
            }
            return false;
        });
        ipcMain.handle('bot:select', async (_e, botName: string) => {
            const config = this.appStorage.get('bots') || {};
            if (config[botName]) {
                this.appStorage.set('currentBot', botName);
                onConfigurationChanged(config[botName]);
                return true;
            }
            return false;
        });
        ipcMain.handle('bot:get-current', async () => {
            const name =  this.appStorage.get('currentBot') || 'default';
            const config = this.appStorage.get('bots') || {};
            return { name: name, config: config[name] || null };
        });
    }

}