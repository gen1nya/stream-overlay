import { ActionTypes } from './ActionTypes';
import Middleware from './Middleware';
import { BotConfig } from './MiddlewareProcessor';
import RoleRestoreManager from './RoleRestoreManager';

export default class RouletteService extends Middleware {
  private mutedUsers = new Set<string>();
  private commands: string[];
  private commandCooldown: number;
  private survivalMessages: string[];
  private deathMessages: string[];
  private cooldownMessages: string[];
  private muteDuration: number;
  private enabled: boolean;
  private cooldowns: Map<string, number> = new Map();
  private roleManager = new RoleRestoreManager();
  private chance: number;

  constructor(
    muteDuration = 2 * 60 * 1000,
    commandCooldown = 30 * 1000,
    deathMessages: string[] = [
      '@${user} –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫‚Ä¶ –∏ –±—ã–ª –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —Å–æ–∂—Ä—ë–Ω –º–∏–º–∏–∫–æ–º. ü™§',
      '–°—É–¥—å–±–∞ –Ω–µ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, ${user}. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–æ–ª—á–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. üîá',
      '${user} –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∏—Ç—É. –¢–∏—à–∏–Ω–∞‚Ä¶ –∏ —Ç–æ–ª—å–∫–æ —ç—Ö–æ. ‚ö∞Ô∏è',
      '–í —Ç–∞–≤–µ—Ä–Ω–µ –∑–∞–≥—Ä–µ–º–µ–ª–∞ —Ä—É–ª–µ—Ç–∫–∞ - –∏ ${user} –∏—Å—á–µ–∑ –≤ –æ–±–ª–∞–∫–µ –ø—ã–ª–∏. –î–≤–∞ –∫—Ä—É–≥–∞ —Ç–∏—à–∏–Ω—ã. üçÇ',
      '${user}, –Ω–µ —Ç—Ä–æ–≥–∞–π *—Ç–æ—Ç* –∞—Ä—Ç–µ—Ñ–∞–∫—Ç... –û–π. –ü–æ–∑–¥–Ω–æ. –û—Ç–¥—ã—Ö–∞–π –≤ –∑–∞–ª–µ –º–æ–ª—á–∞–Ω–∏—è. üïØÔ∏è',
    ],
    survivalMessages: string[] = [
      '@${user} –º–µ—Ç–Ω—É–ª –∫–æ—Å—Ç—å —Å—É–¥—å–±—ã... –∏ –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤! üé≤ –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.',
      '@${user} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –ø—Ä–æ–∫–ª—è—Ç–∏—è –∏ –≤—ã–±–µ–∂–∞–ª –∏–∑ –ø–æ–¥–≤–∞–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏: "–ü—Ñ, –ª–µ–≥–∫–æ!" üí®',
      '@${user} –Ω–∞—à—ë–ª –ø—É—Å—Ç–æ–π —Å—É–Ω–¥—É–∫. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ - –ø—Ä–æ—Å—Ç–æ —Å—É–Ω–¥—É–∫. üòâ',
      '@${user} –ø—Ä–∏–∫—Ä—ã–ª—Å—è —â–∏—Ç–æ–º —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –≤—ã—Å—Ç–æ—è–ª! üõ°Ô∏è',
      '@${user} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫ - –∏ –∏–∑–±–µ–∂–∞–ª –∑–µ–ª—å—è –º–æ–ª—á–∞–Ω–∏—è. –ì–∏–ª—å–¥–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! üçÄ',
    ],
    cooldownMessages: string[] = [
      '@${user}, –±–∞—Ä–∞–±–∞–Ω –µ—â—ë –Ω–µ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å—É–¥—å–±–∞ –ª—é–±–∏—Ç —Ç–µ—Ä–ø–µ–ª–∏–≤—ã—Ö. üîÑ',
      '@${user}, –∂–¥–∏ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å. –ö–æ—Å—Ç–∏ —Å—É–¥—å–±—ã –æ—Å—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞. üé≤',
      '@${user}, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Ä—É–ª–µ—Ç–∫–∏ –µ—â—ë –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è... –ù–µ —Å—Ç–æ–∏—Ç —Ç—Ä–æ–≥–∞—Ç—å –µ–≥–æ –¥–≤–∞–∂–¥—ã. üíÄ',
      '@${user}, –º–µ—Ö–∞–Ω–∏–∑–º —Å–Ω–æ–≤–∞ –∑–∞—Ä–∂–∞–≤–µ–ª. –°–º–∞–∑–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥. üõ†Ô∏è',
      '@${user}, —Ç—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ —Ç—è–Ω–µ—à—å –∑–∞ —Å–ø—É—Å–∫–æ–≤–æ–π –∫—Ä—é–∫. –ü–æ–¥–æ–∂–¥–∏, –≥–µ—Ä–æ–π. üòè',
      '@${user}, –º–∏–º–∏–∫ —É—à—ë–ª –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å. –í–µ—Ä–Ω—ë—Ç—Å—è —Å –¥–µ—Å–µ—Ä—Ç–æ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–≥–Ω–æ–≤–µ–Ω–∏–π. üç¥',
      '@${user}, –∫–æ—Å—Ç–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç –≤ –±–∞—Ä–µ. –ë—Ä–æ—Å–∞—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á—É—Ç—å –ø–æ–∑–∂–µ. üçª',
      '@${user}, –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∏–¥—ë—Ç... –ù–µ –∑–ª–∏ –±–æ–≥–∞ —Ä–∞–Ω–¥–æ–º–∞, –æ–Ω –∏ —Ç–∞–∫ –Ω–∞ –≥—Ä–∞–Ω–∏. ‚ö°',
      '@${user}, —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å? –≠–π, –¥–∞–π –¥—Ä—É–≥–∏–º –ø–æ–∫—Ä—É—Ç–∏—Ç—å! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. ‚è≥',
      '@${user}, –∫—É–∑–Ω–µ—Ü –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç –±–∞—Ä–∞–±–∞–Ω —É–¥–∞—á–∏... –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä—É —É–¥–∞—Ä–æ–≤ –º–æ–ª–æ—Ç–∞ (–ø–æ –ª–∏—Ü—É). üî®',
      '@${user}, —Ä—É–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ - –∫—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–æ—Ä–≤–∞–ª—Å—è. –ü—Ä–∏–±–µ—Ä–µ–≥–∏ —Å—É–¥—å–±—É. üí•',
      '@${user}, –º–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ä—É–ª–µ—Ç–∫–∏ –∏—Å—Ç–æ—â–µ–Ω–∞. –ñ–¥–∏, –ø–æ–∫–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —Å–Ω–æ–≤–∞ –∑–∞—Å–≤–µ—Ç—è—Ç—Å—è. üîÆ',
      '@${user}, –∂—Ä–µ–±–∏–π —É–∂–µ –±—Ä–æ—à–µ–Ω - –Ω–æ–≤—ã–µ —É–¥–∞—Ä—ã —Å—É–¥—å–±—ã –±—É–¥—É—Ç –ø–æ–∑–∂–µ. –ù–µ —Ç–æ—Ä–æ–ø–∏ –∑–≤—ë–∑–¥—ã. ‚ú®',
      '@${user}, –æ—á–µ—Ä–µ–¥—å –≤ –ª–∞–≤–∫—É —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π –¥–ª–∏–Ω–Ω–∞—è. –í–æ–∑—å–º–∏ –∂–µ—Ç–æ–Ω –∏ –ø–æ–¥–æ–∂–¥–∏ –≤—ã–∑–æ–≤–∞. ü™ô',
      '–ü—Ä–∏–≤–µ—Ç... —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      'WAAAAAAAAGH!!!!11!',
    ],
    commands: string[] = ['!roulette', '!—Ä—É–ª–µ—Ç–∫–∞', '!stick', '!–ø–∞–ª–æ—á–∫–∞'],
    enabled: boolean = false,
  ) {
    super();
    this.commands = commands;
    this.commandCooldown = commandCooldown;
    this.survivalMessages = survivalMessages;
    this.deathMessages = deathMessages;
    this.cooldownMessages = cooldownMessages;
    this.muteDuration = muteDuration;
    this.enabled = enabled;
    this.chance = 18;
  }

    updateConfig(config: BotConfig) {
      this.commands = config.roulette.commands;
      this.commandCooldown = config.roulette.commandCooldown;
      this.survivalMessages = config.roulette.survivalMessages;
      this.deathMessages = config.roulette.deathMessages;
      this.cooldownMessages = config.roulette.cooldownMessage;
      this.muteDuration = config.roulette.muteDuration;
      this.enabled = config.roulette.enabled;
      this.chance = config.roulette.chance || 18;
      console.log('‚úÖ RouletteService config updated:', config.roulette);
    }

  async processMessage(message: any) {
    if (!this.enabled) {
      console.warn('‚è© RouletteService is disabled, skipping message processing');
      return { accepted: false, message: { ...message }, actions: [] };
    }
    if (!this.commands.includes(message.htmlMessage)) {
      console.warn(`‚è© Message is not a roulette command, skipping`);
      return { accepted: false, message: { ...message }, actions: [] };
    }
    const now = Date.now();
    const lastUsed = this.cooldowns.get(message.userId) || 0;
    if (now - lastUsed < this.commandCooldown) {
      const cooldownMsg = this.getRandomMessage(this.cooldownMessages, message.username);
      return {
        accepted: false,
        message: { ...message },
        actions: [
          { type: ActionTypes.SEND_MESSAGE, payload: { message: cooldownMsg, forwardToUi: true } },
        ],
      };
    }
    this.cooldowns.set(message.userId, now);
    const actions: any[] = [];
    if (this.checkRouletteWin()) {
      const prepared = await this.roleManager.prepareMute(message.userId, message.username, this.muteDuration);
      if (!prepared) {
        return {
          accepted: true,
          message: { ...message },
          actions: [
            {
              type: ActionTypes.SEND_MESSAGE,
              payload: {
                message: `@${message.username}, —Ç—ã –∂–µ –Ω–µ –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç—ã, —á—Ç–æ —Å–∏–¥–∏—Ç –∑–∞ —ç–∫—Ä–∞–Ω–æ–º, –∏ —Ç—ã –∑–¥–µ—Å—å, –≤ –°–µ—Ç–∏ - —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ?`,
                forwardToUi: true
              }
            },
          ],
        };
      }

      const reason = this.getRandomMessage(this.deathMessages, message.username);
      actions.push(
        { type: ActionTypes.SEND_MESSAGE, payload: { message: reason, forwardToUi: true } },
        { type: ActionTypes.MUTE_USER, payload: { userId: message.userId, reason, duration: this.muteDuration / 1000 } }
      );
    } else {
      const reason = this.getRandomMessage(this.survivalMessages, message.username);
      actions.push({ type: ActionTypes.SEND_MESSAGE, payload: { message: reason, forwardToUi: true } });
    }
    return { accepted: true, message: { ...message }, actions };
  }

  private checkRouletteWin(): boolean {
    if (this.chance <= 0) return false;
    if (this.chance >= 1) return true;
    const roll = Math.random();
    console.log(`üé≤ Roulette roll: ${roll} (chance: ${this.chance})`);
    return roll < this.chance;
  }

  private getRandomMessage(array: string[], username: string): string {
    const template = array[Math.floor(Math.random() * array.length)];
    return template.replace(/\$\{user\}/g, username);
  }
}
