import React, { useState } from "react";
import styled, { ThemeProvider } from "styled-components";
import useReconnectingWebSocket from '../../hooks/useReconnectingWebSocket';
import ChatMessage from "./ChatMessage";
import ChatFollow from './ChatFollow';
import {defaultTheme} from "../../theme";
import ChatRedemption from "./ChatRedemption";
import {registerFontFace} from "../utils/fontsCache";

const BackgroundContainer = styled.div`
    position: absolute;
    z-index: -1;
    background: ${({ theme }) => {
        switch (theme.overlay?.backgroundType ?? "none") {
            case 'none':
                return 'transparent';
            case 'color':
                return theme.overlay?.backgroundColor || 'transparent';
            case 'image':
                return `url(${theme.overlay?.backgroundImage}) no-repeat center / cover`;
            default:
                return 'transparent';
        }
    }};
    
    ${({ theme }) =>
            theme.overlay?.backgroundType === 'image' && theme.overlay?.backgroundImageAspectRatio
                    ?
                    `
            opacity: ${theme.overlay?.backgroundOpacity || 1};
            aspect-ratio: ${theme.overlay.backgroundImageAspectRatio};
            width: ${theme.overlay.containerWidth || 500}px;
        `
                    : ''}
    
`;

const MessagePreviewContainer = styled.div`
    box-sizing: border-box;
    border: 1px solid #ff0000;
    overflow-y: auto;
    scroll-behavior: auto;
    box-shadow: 0 0 4px rgba(97, 97, 97, 0.2);
    display: flex;
    flex-direction: column;

    border-radius: ${({theme}) => theme.overlay?.borderRadius || 0}px;

    margin: ${({theme}) => {
        return `${theme.overlay?.paddingTop || 0}px 0px 0px ${theme.overlay?.paddingLeft || 0}px`;
    }};

    ${({theme}) =>
            theme.overlay?.backgroundType === 'image' && theme.overlay?.backgroundImageAspectRatio
                    ?
                    `
            width: ${(theme.overlay.chatWidth || 500)}px;
            height: ${(theme.overlay.chatHeight || 500)}px;
        `
                    : ''}
    &::-webkit-scrollbar {
        width: 0 !important;
        height: 0 !important;
    }
`;

const ConnectionLost = styled.div`
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 32px;
    color: red;
    background: rgba(0,0,0,0.5);
    z-index: 10;
`;

export default function PreviewComponent() {
    const [theme, setTheme] = useState(defaultTheme);

    const { isConnected } = useReconnectingWebSocket('ws://localhost:42001', {
        onOpen: (_, socket) => {
            console.log('üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            socket.send(JSON.stringify({ channel: 'theme:get' }));
        },
        onMessage: event => {
            const { channel, payload } = JSON.parse(event.data);
            switch (channel) {
                case 'theme:update':
                    setTheme(payload);
                    payload?.followMessage?.forEach((m, index) => {
                        registerFontFace(m.messageFont.family, m.messageFont.url);
                    })
                    payload?.redeemMessage?.forEach((m, index) => {
                        registerFontFace(m.messageFont.family, m.messageFont.url);
                    })
                    registerFontFace(
                        payload.chatMessage.titleFont.family,
                        payload.chatMessage.titleFont.url
                    );
                    registerFontFace(
                        payload.chatMessage.messageFont.family,
                        payload.chatMessage.messageFont.url
                    );
                    console.log('–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', payload);
                    break;
                default:
                    console.log('unknown channel', channel, payload);
            }
        },
        onClose: () => console.log('üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω'),
    });

    const message = {
        userName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        color: "#ffffff",
        htmlBadges: "",
        htmlMessage: "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.",
    };

    const longMessage = {
        userName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        color: "#ffffff",
        htmlBadges: "",
        htmlMessage: "–û—Ç–∫—Ä–æ–π –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä Teyvat –≤ Genshin Impact! –°–æ–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –≥–µ—Ä–æ–µ–≤, –∏—Å—Å–ª–µ–¥—É–π –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏, —Å—Ä–∞–∂–∞–π—Å—è —Å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤—Ä–∞–≥–∞–º–∏ –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Ç–∞–π–Ω—ã —Å–µ–º–∏ —Å—Ç–∏—Ö–∏–π. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–≥—Ä–∞–π –Ω–∞ –ü–ö, PlayStation –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–∏–ª–ª–∏–æ–Ω–∞–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É ‚Äî –Ω–∞—á–Ω–∏ —Å–≤–æ—ë –≤–µ–ª–∏–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! #GenshinImpact #–ò–≥—Ä–∞–π–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    };

    const followMessage = {
        userName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    };

    const redemptionMessage = {
        userName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        reward: {
            title: "–ü–æ–¥–∞—Ä–æ–∫",
            cost: 100
        }
    }

    return <ThemeProvider theme={theme}>
        <>
            <BackgroundContainer />
            <MessagePreviewContainer>
                <ChatMessage message={message} showSourceChannel={false}/>
                <ChatMessage message={longMessage} showSourceChannel={false}/>
                {theme.redeemMessage?.map((_, index) => (
                    <ChatRedemption
                        key={index}
                        message={redemptionMessage}
                        currentTheme={theme}
                        index={index}
                    />
                ))}
                {theme.followMessage?.map((_, index) => (
                    <ChatFollow
                        key={index}
                        message={followMessage}
                        currentTheme={theme}
                        index={index}
                    />
                ))}
            </MessagePreviewContainer>
            {!isConnected && <ConnectionLost>–Ω–µ—Ç —Å–≤—è–∑–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º</ConnectionLost>}
        </>

    </ThemeProvider>;

}