import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';
import styled, { createGlobalStyle, ThemeProvider } from 'styled-components';
import ChatMessage from './ChatMessage';
import ChatFollow from './ChatFollow';
import ChatRedemption from './ChatRedemption';
import { defaultTheme } from '../theme';

const GlobalStyle = createGlobalStyle`
    html, body, #root {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        background: transparent !important;
        overflow: hidden;
    }
    html, body {
        scroll-behavior: auto;
    }

    /* –ü–æ –∂–µ–ª–∞–Ω–∏—é: –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ opacity —É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
    .chat-animated {
        animation: fadeIn 300ms ease-out forwards;
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to   { opacity: 1; }
    }
`;


const BackgroundContainer = styled.div`
    position: absolute;
    z-index: -1;
    background: ${({ theme }) => {
        switch (theme.overlay?.backgroundType ?? "none") {
            case 'none':
                return 'transparent';
            case 'color':
                return theme.overlay?.backgroundColor || 'transparent';
            case 'image':
                return `url(${theme.overlay?.backgroundImage}) no-repeat center / cover`;
            default:
                return 'transparent';
        }
    }};
    ${({ theme }) =>
            theme.overlay?.backgroundType === 'image' && theme.overlay?.backgroundImageAspectRatio
                    ?
                    `
            aspect-ratio: ${theme.overlay.backgroundImageAspectRatio};
            width: ${theme.overlay.containerWidth || 500}px;
        `
                    : ''}
`;


const ChatContainer = styled.div`
    box-sizing: border-box;
    color: #fff;
    overflow-y: auto;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;

    border-radius: ${({ theme }) => theme.overlay?.borderRadius || 0}px;
    
    margin: ${({ theme }) => {
        return `${theme.overlay?.paddingTop || 0}px  0px 0px ${theme.overlay?.paddingLeft || 0}px`;
    }};

    ${({ theme }) =>
            theme.overlay?.backgroundType === 'image' && theme.overlay?.backgroundImageAspectRatio
                    ?
                    `
            width: ${(theme.overlay.chatWidth || 500)}px;
            height: ${(theme.overlay.chatHeight || 500)}px;
        `
                    : ''}
    &::-webkit-scrollbar {
        width: 0 !important;
        height: 0 !important;
    }
`;

export default function ChatOverlay() {
    const chatRef = useRef(null);
    const [messages, setMessages] = useState([]);
    const [theme, setTheme] = useState(defaultTheme);

    // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º —Ä–µ—Ñ—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageRefs = useRef({});
    // –•—Ä–∞–Ω–∏–º ID ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    const prevLastIdRef = useRef(null);

    useEffect(() => {
        const ws = new WebSocket('ws://localhost:42001');
        ws.onopen = () => {
            console.log('üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            ws.send(JSON.stringify({ channel: 'theme:get' }));
        };
        ws.onmessage = event => {
            const { channel, payload } = JSON.parse(event.data);
            switch (channel) {
                case 'chat:messages':
                    const initial = payload
                        .map(m => ({ ...m, type: m.type || 'chat' }));
                    setMessages(initial);
                    break;
                case 'theme:update':
                    setTheme(payload);
                    break;
                default:
                    console.log('unknown channel', channel, payload);
            }
        };
        ws.onclose = () => console.log('üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        return () => ws.close();
    }, []);

    /**
     * –í useLayoutEffect –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è
     * —Å —Ç–µ–∫—É—â–∏–º ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–º¬ª. –ï—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç ‚Äî –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
     * –∏ —Ç–æ–≥–¥–∞:
     *   1) –°–∫—Ä—ã—Ç–æ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–º messageRefs –∏–∑–º–µ—Ä—è–µ–º –µ–≥–æ –≤—ã—Å–æ—Ç—É
     *   2) –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º chatContainer translateY(thisHeight) –±–µ–∑ transition
     *   3) –£–±–∏—Ä–∞–µ–º —É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è visibility:hidden –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É chatContainer
     *      transition: transform 300ms ease ‚Üí transform: translateY(0)
     *   4) –ß–µ—Ä–µ–∑ 300–º—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ inline-—Å—Ç–∏–ª–∏
     *
     * –ï—Å–ª–∏ ID –ø—Ä–µ–∂–Ω–µ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç) ‚Üí –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑.
     */
    useLayoutEffect(() => {
        const chat = chatRef.current;
        if (!chat) return;

        // –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º prevLastId
        if (messages.length === 0) {
            chat.scrollTop = chat.scrollHeight;
            prevLastIdRef.current = null;
            return;
        }

        // –°–º–æ—Ç—Ä–∏–º ID ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ¬ª —ç–ª–µ–º–µ–Ω—Ç–∞
        const lastMsg = messages[messages.length - 1];
        const currLastId = lastMsg.id ?? `idx_${messages.length - 1}`;

        // –ï—Å–ª–∏ ID –∏–∑–º–µ–Ω–∏–ª—Å—è (–∏–ª–∏ –±—ã–ª null —Ä–∞–Ω—å—à–µ) ‚Üí –∞–Ω–∏–º–∏—Ä—É–µ–º ¬´–≤—ä–µ–∑–¥¬ª
        if (prevLastIdRef.current !== currLastId) {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ä–µ—Ñ
            if (!messageRefs.current[currLastId]) {
                messageRefs.current[currLastId] = React.createRef();
            }
            const msgNode = messageRefs.current[currLastId].current;
            if (!msgNode) {
                // –≤–¥—Ä—É–≥ –Ω–æ–¥—ã –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID
                chat.scrollTop = chat.scrollHeight;
                prevLastIdRef.current = currLastId;
                return;
            }

            // 1) –ò–∑–º–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É ¬´–Ω–æ–≤–æ–≥–æ¬ª —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const newHeight = msgNode.getBoundingClientRect().height;

            // 2) –°–¥–≤–∏–≥–∞–µ–º chatContainer –≤–Ω–∏–∑ –Ω–∞ —ç—Ç—É –≤—ã—Å–æ—Ç—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            chat.style.transition = 'none';
            chat.style.transform = `translateY(${newHeight}px)`;

            // –§–æ—Ä—Å–∏–º reflow, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª transform=translateY(newHeight)
            // eslint-disable-next-line no-unused-expressions
            chat.offsetHeight;

            // 3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–∞—ë–º –µ–º—É –∫–ª–∞—Å—Å .chat-animated –¥–ª—è fadeIn
            msgNode.style.visibility = '';
            msgNode.classList.add('chat-animated');

            // 4) –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º transform ‚Üí 0
            chat.style.transition = 'transform 300ms ease';
            chat.style.transform = 'translateY(0)';

            // 5) –ß–µ—Ä–µ–∑ 300–º—Å —É–±–∏—Ä–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            setTimeout(() => {
                chat.style.transition = '';
                chat.style.transform = '';
                msgNode.classList.remove('chat-animated');
            }, 300);
        } else {
            // ID –Ω–µ –ø–æ–º–µ–Ω—è–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤ —Å–∞–º—ã–π –Ω–∏–∑
            chat.scrollTop = chat.scrollHeight;
        }

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        prevLastIdRef.current = currLastId;
    }, [messages]);

    return (
        <ThemeProvider theme={theme}>
            <GlobalStyle />
            <BackgroundContainer />
            <ChatContainer ref={chatRef}>
                {messages.map((msg, idx) => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´—É–Ω–∏–∫–∞–ª—å–Ω—ã–π¬ª ID –¥–ª—è —Ä–µ—Ñ–∞
                    const id = msg.id ?? `idx_${idx}`;
                    if (!messageRefs.current[id]) {
                        messageRefs.current[id] = React.createRef();
                    }
                    const nodeRef = messageRefs.current[id];

                    // –¢–µ–ø–µ—Ä—å isLatest = –ø—Ä–æ—Å—Ç–æ ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç + –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å prevLastId¬ª
                    const isLatest = idx === messages.length - 1
                        && prevLastIdRef.current !== id;

                    // –ï—Å–ª–∏ isLatest, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–º–µ—Ä–∏—Ç—å –≤—ã—Å–æ—Ç—É
                    const styleForVisibility = isLatest
                        ? { visibility: 'hidden' }
                        : {};

                    // –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
                    let Content;
                    if (msg.type === 'chat') {
                        Content = <ChatMessage message={msg} />;
                    } else if (msg.type === 'follow') {
                        Content = <ChatFollow message={msg} />;
                    } else if (msg.type === 'redemption') {
                        Content = <ChatRedemption
                            message={msg}
                            template={theme.redeemMessage.template}
                        />;
                    } else {
                        return null;
                    }

                    return (
                        <div key={id} ref={nodeRef} style={styleForVisibility}>
                            {Content}
                        </div>
                    );
                })}
            </ChatContainer>
        </ThemeProvider>
    );
}
